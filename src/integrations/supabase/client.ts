
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://jeidjpwdsmqwemwhlwqq.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImplaWRqcHdkc21xd2Vtd2hsd3FxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4Njg1MDcsImV4cCI6MjA2NDQ0NDUwN30.py8hVUD6ieMfhrmpLKeM861qyXK4YuwYRWddEQKnFl0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Initialize admin user function
export const initializeAdmin = async (): Promise<{ success: boolean; message?: string; error?: string }> => {
  try {
    // Check if admin user already exists
    const { data: existingAdmin, error: checkError } = await supabase
      .from('profiles')
      .select('id')
      .eq('email', 'admin@musicschool.com')
      .single();

    if (checkError && checkError.code !== 'PGRST116') {
      console.error('Error checking for existing admin:', checkError);
      return { success: false, error: checkError.message };
    }

    if (existingAdmin) {
      return { success: true, message: 'Admin user already exists' };
    }

    // Create admin user using auth.admin (this would normally be done server-side)
    // For demo purposes, we'll just log this
    console.log('Admin user would be created here in a real application');
    
    return { success: true, message: 'Admin initialization completed' };
  } catch (error: any) {
    console.error('Error initializing admin:', error);
    return { success: false, error: error.message };
  }
};
